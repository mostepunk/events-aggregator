[tool.ruff]
select = ["ALL"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "migrations",
    "dist",
    "node_modules",
    "venv",
]
ignore = [
    "ANN",      # Type hints related, let mypy handle these.
    "COM812",   # "Trailing comma missing". If black is happy, I'm happy.
    "D",        # Docstrings related
    "E501",     # "Line too long". If black is happy, I'm happy.
    "EM101",    # "Exception must not use a string literal, assign to variable first"
    "EM102",    # "Exception must not use an f-string literal, assign to variable first"
    "PTH",      # User Pathlib stuff over os.*. Should migrate to Pathlib at some point.
    "RET504",   # "Unnecessary variable assignment before `return` statement"
    "S101",     # "Use of `assert` detected"
    "SIM108",   # "Use ternary operator ...". Ternary is harmful for readability in some cases.
    "TRY003",   # "Avoid specifying long messages outside the exception class"
    "RUF001",
    "RUF002",
    "RUF003",
    "G004",     # Logging statement uses f-string
    "N805",     # First argument of a method should be named `self`
    "FA102",    # Missing `from __future__ import annotations`, but uses PEP 585 collection
    "S608",     # Possible SQL injection vector through string-based query construction
    "TRY400",   # Use `logging.exception` instead of `logging.error` [TRY400]
]
line-length = 120
target-version = "py37"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"plgr.py" = ["T203"]
"plgr*" = ["T203", "T201"]

[tool.pytest.ini_options]
pythonpath = [
    ".", "app"
]
asyncio_mode="auto"
addopts = '''
  --strict-markers
  --tb=auto
  --ignore=db
'''
filterwarnings = [
    "ignore::DeprecationWarning",
    # "ignore::PytestDeprecationWarning",
]
asyncio_default_fixture_loop_scope="session"

[tool.isort]
profile = "black"
# known_first_party = ["app"]
known_local_folder = ["app"]

[tool.autoimport.common_statements]
# ================ STANDART ======================
"UUID" = "from uuid import UUID"
"uuid4" = "from uuid import uuid4"
"timedelta" = "from datetime import timedelta"
"pprint" = "from pprint import pprint"
#
# ================ INSTALLED LIBS ================
#
# === Pydantic ===
"Field" = "from pydantic import Field"
"validator" = "from pydantic import validator"
"root_validator" = "from pydantic import root_validator"
"parse_obj_as" = "from pydantic import parse_obj_as"
"TypeAdapter" = "from pydantic import TypeAdapter"
# === FastAPI ===
"APIRouter" = "from fastapi import APIRouter"
"Depends"= "from fastapi import Depends"
"HTTPException" = "from fastapi import HTTPException"
# === SQLAlchemy ===
"select" = "from sqlalchemy import select"
"update" = "from sqlalchemy import update"
"contains_eager" = "from sqlalchemy.orm import contains_eager"
"selectinload" = "from sqlalchemy.orm import selectinload"
"joinedload" = "from sqlalchemy.orm import joinedload"
"func" = "from sqlalchemy import func"
"AsyncSession" = "from sqlalchemy.ext.asyncio import AsyncSession"
"Mapped" = "from sqlalchemy.orm import Mapped"
"mapped_column" = "from sqlalchemy.orm import mapped_column"
"relationship" = "from sqlalchemy.orm import relationship"
"ForeignKey" = "from sqlalchemy import ForeignKey"
"FK" = "from sqlalchemy import ForeignKey as FK"
"PrimaryKeyConstraint" = "from sqlalchemy import PrimaryKeyConstraint"
"UniqueConstraint" = "from sqlalchemy import UniqueConstraint"
"String" = "from sqlalchemy import String"
"Boolean" = "from sqlalchemy import Boolean"
"or_" = "from sqlalchemy import or_"
"Text" = "from sqlalchemy import Text"
# === MongoDB ===
"ObjectId" = "from bson.objectid import ObjectId"
#
# ================ LOCAL LIBS ================
#
"BaseInsertSchemaMixin" = "from app.adapters.schemas.base import BaseInsertSchemaMixin"
"BaseSchema" = "from app.adapters.schemas.base import BaseSchema"
"DBSchemaMixin" = "from app.adapters.schemas.base import DBSchemaMixin"
"config" = "from app.settings import config"
"getLogger" = "from app import getLogger"
"logging" = "logging = getLogger(__name__)"
